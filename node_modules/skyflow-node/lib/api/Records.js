"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _axios = _interopRequireDefault(require("axios"));

var _VaultNotFoundException = _interopRequireDefault(require("../CustomErrors/VaultNotFoundException"));

var Records = {
  insertRecords: function insertRecords(tableName, records, callback) {
    var _this = this;

    return this.callApi(function (_ref) {
      var tableName = _ref.tableName,
          records = _ref.records;
      return _axios.default.post(_this.vaultUrl + '/' + tableName, records, {
        headers: _this.defaultHeaders
      }).then(function (res) {
        if (callback) {
          callback(res.data);
        }

        return res.data;
      }).catch(function (err) {
        return err && err.response && err.response.data;
      });
    }, {
      tableName: tableName,
      records: records
    });
  },
  bulkGetRecords: function bulkGetRecords(tableName, options, callback) {
    var _this2 = this;

    return this.callApi(function (_ref2) {
      var tableName = _ref2.tableName,
          _ref2$options = _ref2.options,
          options = _ref2$options === void 0 ? {} : _ref2$options;
      return _axios.default.get(_this2.vaultUrl + '/' + tableName, {
        headers: _this2.defaultHeaders,
        params: {
          skyflow_ids: options.skyflowIds,
          redaction: options.redaction,
          tokenization: options.tokenization,
          fields: options.fields,
          offset: options.offset,
          limit: options.limit
        }
      }).then(function (res) {
        if (callback) {
          callback(res.data);
        }

        return res.data;
      }).catch(function (err) {
        return err && err.response && err.response.data;
      });
    }, {
      tableName: tableName,
      options: options
    });
  },
  getRecord: function getRecord(tableName, recordId) {
    var _this3 = this;

    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var callback = arguments.length > 3 ? arguments[3] : undefined;
    var url = this.vaultUrl + '/' + tableName + '/' + recordId;
    return this.callApi(function (_ref3) {
      var options = _ref3.options;
      return _axios.default.get(url, {
        headers: _this3.defaultHeaders,
        params: {
          redaction: options.redaction,
          tokenization: options.tokenization,
          fields: options.fields
        }
      }).then(function (res) {
        if (callback) {
          callback(res.data);
        }

        return res.data;
      }).catch(function (err) {
        return err && err.response && err.response.data;
      });
    }, {
      options: options
    });
  },
  updateRecord: function updateRecord(tableName, recordId, record, callback) {
    var _this4 = this;

    return this.callApi(function (_ref4) {
      var tableName = _ref4.tableName,
          recordId = _ref4.recordId,
          record = _ref4.record;
      return _axios.default.put(_this4.vaultUrl + '/' + tableName + '/' + recordId, record, {
        headers: _this4.defaultHeaders
      }).then(function (res) {
        if (callback) {
          callback(res.data);
        }

        return res.data;
      }).catch(function (err) {
        return err && err.response && err.response.data;
      });
    }, {
      tableName: tableName,
      recordId: recordId,
      record: record
    });
  },
  deleteRecord: function deleteRecord(tableName, recordId, callback) {
    var _this5 = this;

    return this.callApi(function (_ref5) {
      var tableName = _ref5.tableName,
          recordId = _ref5.recordId;
      return _axios.default.delete(_this5.vaultUrl + '/' + tableName + '/' + recordId, {
        headers: _this5.defaultHeaders
      }).then(function (res) {
        if (callback) {
          callback(res.data);
        }

        return res.data;
      }).catch(function (err) {
        return err && err.response && err.response.data;
      });
    }, {
      tableName: tableName,
      recordId: recordId
    });
  },
  bulkDeleteRecords: function bulkDeleteRecords(tableName) {
    var _this6 = this;

    var skyflowIds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var callback = arguments.length > 2 ? arguments[2] : undefined;
    return this.callApi(function (_ref6) {
      var tableName = _ref6.tableName,
          skyflowIds = _ref6.skyflowIds;
      return _axios.default.delete(_this6.vaultUrl + '/' + tableName, {
        headers: _this6.defaultHeaders,
        params: {
          skyflow_ids: skyflowIds
        }
      }).then(function (res) {
        if (callback) {
          callback(res.data);
        }

        return res.data;
      }).catch(function (err) {
        return err && err.response && err.response.data;
      });
    }, {
      tableName: tableName,
      skyflowIds: skyflowIds
    });
  }
};
var _default = Records;
exports.default = _default;